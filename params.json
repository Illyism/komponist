{"note":"Don't delete this file! It's used internally to help with page regeneration.","name":"Komponist","body":"# komponist\r\n\r\nA simple, yet flexible, Node client library for [MPD](http://mpd.wikia.com/),\r\nthe hackable headless audio playback server.\r\n\r\n## Installation\r\n\r\n``` bash\r\nnpm install komponist\r\n```\r\n\r\nOf course, before you go ahead and write any code - make sure you\r\n[install MPD](http://mpd.wikia.com/wiki/Install) and start it up wherever you\r\nwant to play your music from. You should probably get MPC (the simple CLI client)\r\ntoo.\r\n\r\n## Basic Usage\r\n\r\nWith a small number of exceptions, komponist exposes all of the available\r\ncommands as callback-style methods. For a full list\r\n[check out the docs](http://www.musicpd.org/doc/protocol/).\r\n\r\n``` javascript\r\nvar komponist = require('komponist')\r\n\r\nvar client = komponist.connect(6600, 'localhost', function() {\r\n  client.add('~/iTunes', function(err) {\r\n    client.play(function(err) {\r\n      client.currentsong(function(err, info) {\r\n        console.log(info.Artist); // Ennio Morricone\r\n        console.log(info.Title);  // Il Buono, Il Cattivo, Il Brutto\r\n        console.log(info.Album);  // The Good, The Bad, And The Ugly\r\n      });\r\n    });\r\n  });\r\n});\r\n```\r\n\r\nIf you prefer to just fire and forget, you can omit the callbacks.\r\n\r\n``` javascript\r\n// You can always omit the port/host if you're running\r\n// MPD locally and with the default settings.\r\nkomponist.connect(function(err, client) {\r\n  client.add('~/iTunes');\r\n  client.random();\r\n  client.play();\r\n});\r\n```\r\n\r\nThere's also a general purpose `command` method:\r\n\r\n``` javascript\r\nvar client = komponist.connect(function() {\r\n  // Jump 60 seconds into the 5th track in your playlist:\r\n  client.command('seek', [5, 60], function(err) {\r\n    // And stop playing when it's done.\r\n    client.command('single');\r\n  });\r\n});\r\n```\r\n\r\nThe client returned by `komponist.connect` is just an extended TCP stream, so if you\r\nlike you can just pipe data around the Node way:\r\n\r\n``` javascript\r\nvar fs = require('fs')\r\n  , client = komponist.connect()\r\n\r\n// Pipe a list of commands to MPD from\r\n// a file, piping the raw response out to\r\n// stdout! (For kicks)\r\nfs.createReadStream('./commands.mpd', 'utf8')\r\n  .pipe(client)\r\n  .pipe(process.stdout)\r\n```\r\n\r\n## Watching for Changes\r\n\r\nIf you're building an interface-driven client for MPD, you're going to want to\r\nbe able to listen for changes as they happen. This is all taken care of for you:\r\njust listen for the \"changed\" event for MPD updates.\r\n\r\n``` javascript\r\nvar komponist = require('komponist')\r\n\r\nkomponist.connect(6600, 'localhost')\r\n   .on('changed', function(system) {\r\n     console.log('Subsystem changed: ' + system);\r\n   });\r\n```\r\n\r\nAccording to the MPD protocol documentation, you can track changes to the\r\nfollowing systems this way:\r\n\r\n* `update`: a database update has started or finished.\r\n* `database`: the song database has been modified after `update`.\r\n* `stored_playlist`: a stored playlist has been modified.\r\n* `playlist`: the current playlist has been modified.\r\n* `player`: the player has been started, stopped or seeked.\r\n* `mixer`: the volume has been changed.\r\n* `output`: an audio output has been enabled or disabled.\r\n* `options`: options like repeat, random, crossfade, replay gain.\r\n* `sticker`: the sticker database has been modified.\r\n* `subscription`: a client has subscribed or unsubscribed to a channel.\r\n\r\n## Publish/Subscribe\r\n\r\nMPD has simple publish/subscribe support for communicating across multiple\r\nclients. Using the `publish` and `subscribe` methods, you can send messages\r\nto other subscribers across the network, e.g. for simple service discovery.\r\n\r\n``` javascript\r\nkomponist.connect(function(err, subscriber) {\r\n  subscriber.subscribe('hello');\r\n  subscriber.subscribe('world');\r\n\r\n  subscriber.on('message', function(message, channel) {\r\n    console.log('Got message \"' + message + '\" on channel \"' + channel + '\"');\r\n  });\r\n});\r\n\r\nkomponist.connect(function(err, publisher) {\r\n  setTimeout(function() {\r\n    publisher.publish('hello', 'message #1');\r\n    publisher.publish('world', 'message #2');\r\n  }, 1000);\r\n});\r\n\r\n// Output:\r\n// Got message \"message #1\" on channel \"hello\"\r\n// Got message \"message #2\" on channel \"world\"\r\n```\r\n\r\n\r\n## Stickers\r\n\r\nMPD stickers are a way for you to store arbitrary data in the MPD database,\r\nassociated with particular objects. Note that to enable stickers,\r\nadd `sticker_file ~/.mpd/mpd.stickers` to your `mpd.conf` file.\r\n\r\n``` javascript\r\nkomponist.connect(function(err, client) {\r\n  client.sticker('song', 'iTunes/song1.mp3').set({\r\n      hello: 'world'\r\n    , lorem: 'ipsum'\r\n  }, function(err) {\r\n    // The sticker method returns a reusable object, taking\r\n    // the arguments \"type\" and \"uri\".\r\n    var sticker = client.sticker('song', 'iTunes/song1.mp3');\r\n\r\n    sticker.get('hello', function(err, data) {\r\n      console.log(data); // { hello: 'world' }\r\n    });\r\n\r\n    sticker.get(['hello', 'lorem'], function(err, data) {\r\n      console.log(data); // { hello: 'world', lorem: 'ipsum' }\r\n    });\r\n\r\n    sticker.list(function(err, data) {\r\n      console.log(data); // { hello: 'world', lorem: 'ipsum' }\r\n    });\r\n\r\n    client.sticker('song', 'iTunes').find('lorem', function(err, data) {\r\n      console.log(data[0].file);    // 'iTunes/song1.mp3'\r\n      console.log(data[0].sticker); // { name: 'lorem', value: 'ipsum' }\r\n      console.log(data[1].file);    // 'iTunes/song2.mp3'\r\n      console.log(data[1].sticker); // { name: 'lorem', value: 'another ipsum' }\r\n    });\r\n  });\r\n\r\n  client.sticker('song', 'iTunes/song2.mp3').set({\r\n    lorem: 'another ipsum'\r\n  });\r\n});\r\n```\r\n\r\nIf you're looking to use the command in the same style as above, it's still\r\naccessible as `komponist._sticker()`.\r\n\r\n## Gotchas\r\n\r\nThe following methods are reserved for TCP sockets, and as such have been\r\naliased:\r\n\r\n* `pause` is now `client.toggle()`\r\n* `kill` is now `client.killServer()`\r\n* `close` will close the connection without issuing a command to MPD.\r\n\r\nYou can still access them as normal through the `command` method. If you come\r\nacross any other bugs or inconsistencies, you're more than welcome create an\r\nissue or a pull request.","google":"UA-12249588-5","tagline":"A simple, yet flexible, Node client library for MPD, the hackable headless audio playback server."}